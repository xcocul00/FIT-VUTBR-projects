                                                                
version 2
run General-0-20170510-14:40:56-7324
attr configname General
attr datetime 20170510-14:40:56
attr experiment General
attr inifile omnetpp.ini
attr iterationvars ""
attr iterationvars2 $repetition=0
attr measurement ""
attr network Test1babel
attr processid 7324
attr repetition 0
attr replication #0
attr resultdir results
attr runnumber 0
attr seedset 0
param **.*.networkLayer.enableANSAConfig true
param **.PC1.configData "xmldoc(\"config.xml\", \"Devices/Host[@id='0.0.1.1']/\")"
param **.PC2.configData "xmldoc(\"config.xml\", \"Devices/Host[@id='0.0.1.2']/\")"
param **.PC3.configData "xmldoc(\"config.xml\", \"Devices/Host[@id='0.0.1.3']/\")"
param **.PC4.configData "xmldoc(\"config.xml\", \"Devices/Host[@id='0.0.1.4']/\")"
param **.R1.configData "xmldoc(\"config.xml\", \"Devices/Router[@id='0.0.0.1']/\")"
param **.R2.configData "xmldoc(\"config.xml\", \"Devices/Router[@id='0.0.0.2']/\")"
param **.R3.configData "xmldoc(\"config.xml\", \"Devices/Router[@id='0.0.0.3']/\")"
param **.R4.configData "xmldoc(\"config.xml\", \"Devices/Router[@id='0.0.0.4']/\")"
param **.R5.configData "xmldoc(\"config.xml\", \"Devices/Router[@id='0.0.0.5']/\")"
param **.scenarioManager.script "xml(\"<scenario/>\")"

vector 0  Test1babel.R1.udp  sentPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  sentPk
attr title  "packets sent, vector(packetBytes)"
vector 20  Test1babel.R1.eth[0].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 16  Test1babel.R1.eth[0].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 11  Test1babel.R1.eth[0].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 254  Test1babel.PC1.eth[0].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 255  Test1babel.PC1.eth[0].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 263  Test1babel.PC1.eth[0].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 188  Test1babel.R5.udp  sentPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  sentPk
attr title  "packets sent, vector(packetBytes)"
vector 220  Test1babel.R5.eth[1].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 216  Test1babel.R5.eth[1].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 211  Test1babel.R5.eth[1].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 165  Test1babel.R4.eth[1].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 166  Test1babel.R4.eth[1].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 174  Test1babel.R4.eth[1].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 142  Test1babel.R4.udp  rcvdPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rcvdPk
attr title  "packets received, vector(packetBytes)"
vector 143  Test1babel.R4.udp  passedUpPk:vector(count)  ETV
attr interpolationmode  none
attr title  "packets passed up, vector(count)"
vector 141  Test1babel.R4.udp  sentPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  sentPk
attr title  "packets sent, vector(packetBytes)"
vector 173  Test1babel.R4.eth[1].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 169  Test1babel.R4.eth[1].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 164  Test1babel.R4.eth[1].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 212  Test1babel.R5.eth[1].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 213  Test1babel.R5.eth[1].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 221  Test1babel.R5.eth[1].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 189  Test1babel.R5.udp  rcvdPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rcvdPk
attr title  "packets received, vector(packetBytes)"
vector 190  Test1babel.R5.udp  passedUpPk:vector(count)  ETV
attr interpolationmode  none
attr title  "packets passed up, vector(count)"
vector 32  Test1babel.R1.eth[1].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 28  Test1babel.R1.eth[1].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 23  Test1babel.R1.eth[1].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 71  Test1babel.R2.eth[0].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 72  Test1babel.R2.eth[0].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 80  Test1babel.R2.eth[0].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 60  Test1babel.R2.udp  rcvdPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rcvdPk
attr title  "packets received, vector(packetBytes)"
vector 61  Test1babel.R2.udp  passedUpPk:vector(count)  ETV
attr interpolationmode  none
attr title  "packets passed up, vector(count)"
vector 59  Test1babel.R2.udp  sentPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  sentPk
attr title  "packets sent, vector(packetBytes)"
vector 79  Test1babel.R2.eth[0].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 75  Test1babel.R2.eth[0].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 70  Test1babel.R2.eth[0].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 24  Test1babel.R1.eth[1].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 25  Test1babel.R1.eth[1].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 33  Test1babel.R1.eth[1].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 1  Test1babel.R1.udp  rcvdPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rcvdPk
attr title  "packets received, vector(packetBytes)"
vector 2  Test1babel.R1.udp  passedUpPk:vector(count)  ETV
attr interpolationmode  none
attr title  "packets passed up, vector(count)"
vector 208  Test1babel.R5.eth[0].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 204  Test1babel.R5.eth[0].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 199  Test1babel.R5.eth[0].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 290  Test1babel.PC3.eth[0].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 291  Test1babel.PC3.eth[0].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 299  Test1babel.PC3.eth[0].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 44  Test1babel.R1.eth[2].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 40  Test1babel.R1.eth[2].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 35  Test1babel.R1.eth[2].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 177  Test1babel.R4.eth[2].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 178  Test1babel.R4.eth[2].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 186  Test1babel.R4.eth[2].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 185  Test1babel.R4.eth[2].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 181  Test1babel.R4.eth[2].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 176  Test1babel.R4.eth[2].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 36  Test1babel.R1.eth[2].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 37  Test1babel.R1.eth[2].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 45  Test1babel.R1.eth[2].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 106  Test1babel.R3.udp  sentPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  sentPk
attr title  "packets sent, vector(packetBytes)"
vector 138  Test1babel.R3.eth[1].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 134  Test1babel.R3.eth[1].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 129  Test1babel.R3.eth[1].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 95  Test1babel.R2.eth[2].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 96  Test1babel.R2.eth[2].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 104  Test1babel.R2.eth[2].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 103  Test1babel.R2.eth[2].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 99  Test1babel.R2.eth[2].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 94  Test1babel.R2.eth[2].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 130  Test1babel.R3.eth[1].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 131  Test1babel.R3.eth[1].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 139  Test1babel.R3.eth[1].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 107  Test1babel.R3.udp  rcvdPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rcvdPk
attr title  "packets received, vector(packetBytes)"
vector 108  Test1babel.R3.udp  passedUpPk:vector(count)  ETV
attr interpolationmode  none
attr title  "packets passed up, vector(count)"
vector 66  Test1babel.R2.networkLayer.ipv6.neighbourDiscovery  startDAD:vector  ETV
attr title  "DAD started, vector"
vector 91  Test1babel.R2.eth[1].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 87  Test1babel.R2.eth[1].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 82  Test1babel.R2.eth[1].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 224  Test1babel.R5.eth[2].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 225  Test1babel.R5.eth[2].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 233  Test1babel.R5.eth[2].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 56  Test1babel.R1.eth[3].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 52  Test1babel.R1.eth[3].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 47  Test1babel.R1.eth[3].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 236  Test1babel.R5.eth[3].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 237  Test1babel.R5.eth[3].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 245  Test1babel.R5.eth[3].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 244  Test1babel.R5.eth[3].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 240  Test1babel.R5.eth[3].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 235  Test1babel.R5.eth[3].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 48  Test1babel.R1.eth[3].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 49  Test1babel.R1.eth[3].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 57  Test1babel.R1.eth[3].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 232  Test1babel.R5.eth[2].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 228  Test1babel.R5.eth[2].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 223  Test1babel.R5.eth[2].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 83  Test1babel.R2.eth[1].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 84  Test1babel.R2.eth[1].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 92  Test1babel.R2.eth[1].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 7  Test1babel.R1.networkLayer.ipv6.neighbourDiscovery  startDAD:vector  ETV
attr title  "DAD started, vector"
vector 126  Test1babel.R3.eth[0].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 122  Test1babel.R3.eth[0].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 117  Test1babel.R3.eth[0].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 308  Test1babel.PC4.eth[0].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 309  Test1babel.PC4.eth[0].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 317  Test1babel.PC4.eth[0].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 148  Test1babel.R4.networkLayer.ipv6.neighbourDiscovery  startDAD:vector  ETV
attr title  "DAD started, vector"
vector 161  Test1babel.R4.eth[0].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 157  Test1babel.R4.eth[0].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 152  Test1babel.R4.eth[0].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 272  Test1babel.PC2.eth[0].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 273  Test1babel.PC2.eth[0].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 281  Test1babel.PC2.eth[0].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 195  Test1babel.R5.networkLayer.ipv6.neighbourDiscovery  startDAD:vector  ETV
attr title  "DAD started, vector"
vector 113  Test1babel.R3.networkLayer.ipv6.neighbourDiscovery  startDAD:vector  ETV
attr title  "DAD started, vector"
vector 193  Test1babel.R5.networkLayer.ipv4.arp  sentReq:vector  ETV
attr title  "ARP request sent, vector"
vector 146  Test1babel.R4.networkLayer.ipv4.arp  sentReq:vector  ETV
attr title  "ARP request sent, vector"
vector 147  Test1babel.R4.networkLayer.ipv4.arp  sentReply:vector  ETV
attr title  "ARP replies sent, vector"
vector 194  Test1babel.R5.networkLayer.ipv4.arp  sentReply:vector  ETV
attr title  "ARP replies sent, vector"
vector 5  Test1babel.R1.networkLayer.ipv4.arp  sentReq:vector  ETV
attr title  "ARP request sent, vector"
vector 64  Test1babel.R2.networkLayer.ipv4.arp  sentReq:vector  ETV
attr title  "ARP request sent, vector"
vector 65  Test1babel.R2.networkLayer.ipv4.arp  sentReply:vector  ETV
attr title  "ARP replies sent, vector"
vector 6  Test1babel.R1.networkLayer.ipv4.arp  sentReply:vector  ETV
attr title  "ARP replies sent, vector"
vector 111  Test1babel.R3.networkLayer.ipv4.arp  sentReq:vector  ETV
attr title  "ARP request sent, vector"
vector 112  Test1babel.R3.networkLayer.ipv4.arp  sentReply:vector  ETV
attr title  "ARP replies sent, vector"
vector 285  Test1babel.PC3.networkLayer.ipv6.neighbourDiscovery  startDAD:vector  ETV
attr title  "DAD started, vector"
vector 298  Test1babel.PC3.eth[0].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 294  Test1babel.PC3.eth[0].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 289  Test1babel.PC3.eth[0].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  txPk
attr title  "packets transmitted, vector(packetBytes)"
vector 200  Test1babel.R5.eth[0].mac  rxPkOk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkOk
attr title  "packets received OK, vector(packetBytes)"
vector 201  Test1babel.R5.eth[0].mac  passedUpPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  packetSentToUpper
attr title  "packets passed to higher layer, vector(packetBytes)"
vector 209  Test1babel.R5.eth[0].encap  decapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  decapPk
attr title  "packets decapsulated, vector(packetBytes)"
vector 303  Test1babel.PC4.networkLayer.ipv6.neighbourDiscovery  startDAD:vector  ETV
attr title  "DAD started, vector"
vector 316  Test1babel.PC4.eth[0].encap  encapPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  encapPk
attr title  "packets encapsulated, vector(packetBytes)"
vector 312  Test1babel.PC4.eth[0].mac  rxPkFromHL:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  rxPkFromHL
attr title  "packet bytes from higher layer, vector(packetBytes)"
vector 307  Test1babel.PC4.eth[0].mac  txPk:vector(packetBytes)  ETV
attr interpolationmode  none
attr source  tx                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      